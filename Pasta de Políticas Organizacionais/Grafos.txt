package ufpa.br.grafos;

public class BuscaIrrestrita {
	
	public static int m; // número de arestas
	public static int n; // número de vértices
	public static int grau[]; // vetor de graus
	public static int G[][]; // listas de adjacência
	public static String[] vetSeparador;
	public static int pilha[];
	public static int contPilha;
	public static String caminhos[] = new String[1000];
	public static int contIrrestritos;
	public static int x,y,z; // variáveis auxiliares
	public static int raiz; // raiz de busca do algoritmo

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		dados(4,5);
		insereAresta("1@2");
		insereAresta("1@3");
		insereAresta("1@4");
		insereAresta("2@3");
		insereAresta("3@4");
		//imprimeGrau();
		definirPilha();
	}
	
	public static void dados(int nVertices, int nArestas)
	{
		n = nVertices;
		m = nArestas;
		grau = new int[n+1];
		G = new int[n+1][n+1];
	}
	
	public static void insereAresta(String aresta)
	{
		vetSeparador = aresta.split("@"); // separa a string em vértice X e Y
		//imprimeAresta();
		int verticeX = Integer.parseInt(vetSeparador[0]);
		int verticeY = Integer.parseInt(vetSeparador[1]);
		//System.out.println(verticeA);
		//System.out.println(verticeB);
		// incrementa o grau dos vértices X e Y
		grau[verticeX] = grau[verticeX]+1;
		grau[verticeY] = grau[verticeY]+1;
		G[verticeX][grau[verticeX]] = verticeY;
		G[verticeY][grau[verticeY]] = verticeX;
	}
	
	public static void definirPilha()
	{
		pilha = new int[n-1];
	}
	
	// linha 4
	public static void inserePilha(int vertice) // 'vertice' a ser inserido na pilha
	{
		int contador = contPilha;
		
		if (contador == 0)
		{
			pilha[1] = vertice; // insere no topo da pilha
			contPilha = contPilha+1;
			System.out.println("Vértice "+vertice+" inserido na pilha.");
		}

		if (contPilha != 0)
		{
			do
			{
				pilha[contador+1] = pilha[contador];
				contador = contador - 1;
			}
			
			while (contPilha != 0);
		}
		
		pilha[1] = vertice;
		contPilha = contPilha+1;
		System.out.println("Vértice "+vertice+" inserido na pilha.");
	}
	
	public static void removePilha()
	{
		int contador = contPilha;
		System.out.println("Vértice "+pilha[1]+" removido da pilha.");
		for(int j=2;j<=contador;j++)
		{
			pilha[j-1] = pilha[j];
		}
		contPilha = contPilha - 1;
	}
	
	public static boolean verificarVertice(int vertice)
	{
		int contador = contPilha;
		
		for(int j=1;j<=contador;j++)
		{
			if (pilha[j] == vertice)
				return true; // retorna 'true' se está na pilha
		}
		
		return false; // retorna 'false' se não está na pilha
	}
	
	public static void visitar(int verticeA,int verticeB)
	{
		for(int i=1;i<=grau[verticeA];i++)
		{
			int w = G[verticeA][i];
			String stringA = Integer.toString(verticeA);
			String stringB = Integer.toString(verticeB);
			String aresta = stringA+"@"+stringB; // VERIFICAR LINHA
			if (verificarVertice(w) == false)
			{
				caminhos[contIrrestritos+1] = aresta; // visitar v,w
				contIrrestritos = contIrrestritos+1;
				irrestrita(w);
			}
		}
	}
	
	public static void imprimirCaminhos()
	{
		System.out.println("Caminho de tamanho: "+contIrrestritos);
		for(int k=1;k<=contIrrestritos;k++)
		{
			String separador[];
			separador = caminhos[k].split("@");
			String verticeX = separador[0];
			String verticeY = separador[1];
			System.out.println("Caminho: "+verticeX+" -> "+verticeY+".");
		}
		removePilha();
		contIrrestritos = contIrrestritos - 1;
	}
	
	public static void irrestrita(int raiz) // Procedimento P(v)
	{
		inserePilha(raiz);
	}
	
	public static void imprime()
	{
		System.out.print("          ");
		for(int i=1;i<=n;i++)
		{
			System.out.print(" "+i+" ");
		}
		System.out.println();
		System.out.println();
		
		for (int i=1;i<=n;i++)
		{
			System.out.print("Linha "+i+" : ");
			for (int k=1;k<=n;k++)
			{
				System.out.print(" "+G[i][k]+" ");
			}
			System.out.println();
		}
	}
	
	public static void imprimeAresta()
	{
		for (int i=0;i<=1;i++)
		{
			System.out.println("Vetor: "+vetSeparador[i]);
		}
	}
	
	public static void imprimeGrau()
	{
		for (int i=1;i<=n;i++)
		{
			System.out.println("Grau: "+grau[i]);
		}
	}

}
